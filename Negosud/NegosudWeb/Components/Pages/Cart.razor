@page "/cart"
@rendermode InteractiveServer

@using NegosudModel.Dto
@using NegosudModel.Request
@using NegosudWeb.Services

@inject NavigationManager Navigation
@inject CartService CartService

<PageTitle>Panier</PageTitle>

<div class="cart-main">
    <div class="d-flex justify-content-between">
        <div class="col-4">
            <NegosudWeb.Components.Shared.BackButton OnClick="GoBack" />
        </div>
        <div class="col-4">
            <h3 class="cart-title text-center">VOTRE PANIER</h3>
        </div>
        <div class="col-4"></div>
    </div>

    <div class="d-flex justify-content-center">
        <div class="cart-body">
            @if (CartService.GetCartItems().Any())
            {
                @foreach (var item in CartService.GetCartItems())
                {
                    <div class="d-flex justify-content-between gap-5">
                        <div class="d-flex flex-column gap-3 item-info">
                            <div class="d-flex">
                                <span class="fs-4 fw-bold text-center w-75">@item.Name</span>
                                <div class="w-25"></div>
                            </div>
                            <div class="d-flex">
                                <div class="w-75 d-flex justify-content-center">
                                    <div>
                                        <span class="d-flex justify-content-center text-xs">Quantité commandée :</span>
                                        <input type="number" value="@CartService.GetQuantity(item.Id)" min="1" @oninput="@(e => UpdateQuantity(item.Id, e.Value?.ToString() ?? "1"))" class="form-control text-center fw-bold input-red-border" />
                                    </div>
                                </div>
                                <span class="w-25 d-flex justify-content-center align-items-end fw-bold">@((CartService.GetUnitPriceTTC(item) * CartService.GetQuantity(item.Id)).ToString("F2")) €</span>
                            </div>
                        </div>
                        <div class="d-flex align-items-center">
                            <div class="d-flex flex-column gap-4">
                                <div class="d-flex justify-content-center">
                                    <button class="btn btn-details" @onclick="() => Details(item)">Voir l'article</button>
                                </div>
                                <div>
                                    <button class="btn btn-buy" @onclick="() => RemoveFromCart(item)">Retirer l'article</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="border-bottom cart-item"></div>
                }
                <div class="cart-total">
                    <span class="fs-2 fw-bold">TOTAL : @CartService.GetTotalTTC().ToString("F2") €</span>
                    <div>
                        <button class="btn btn-cart-buy fs-4" @onclick="ProcessOrder">Passer commande</button>
                    </div>
                </div>
            }
            else
            {
                <p class="cart-empty fst-italic">Votre panier est vide.</p>
            }
        </div>
    </div>
</div>

@code {
    private Dictionary<int, int> quantities = new Dictionary<int, int>();

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;

        foreach (var item in CartService.GetCartItems())
        {
            quantities[item.Id] = 1;
        }
    }

    private void UpdateQuantity(int articleId, string quantityStr)
    {
        if (int.TryParse(quantityStr, out int newQuantity) && newQuantity >= 1)
        {
            CartService.UpdateQuantity(articleId, newQuantity);
        }
        else
        {
            CartService.UpdateQuantity(articleId, 1);
        }

        StateHasChanged();
    }

    private async Task ProcessOrder()
    {
        // Authentification
        // var user = await AuthService.GetAuthenticatedUserAsync();

        // Gérer le cas où l'utilisateur n'est pas authentifié
        // if (user == null)
        // {
        //     Navigation.NavigateTo("/login");
        //     return;
        // }

        var order = new CreateSaleRequest
        {
          // CustomerId = user.Id,  AuthService renvoie un utilisateur avec un Id
          CustomerId = 7,
          Date = DateTime.UtcNow,
          ArticleQuantities = CartService.GetCartItems()
            .Select(article => new ArticleQuantity
            {
               Article = new ArticleDto
               {
                  Id = article.Id,
                  Name = article.Name,
                  TVA = article.TVA,
                  Description = article.Description,
                  UnitPrice = article.UnitPrice,
                  Quantity = article.Quantity,
                  MinimumQuantity = article.MinimumQuantity,
                  IsActive = article.IsActive,
                  SupplierId = article.SupplierId,
                  FamilyId = article.FamilyId
               },
               Quantity = CartService.GetQuantity(article.Id)
            }).ToList()
        };

        
        try
        {
            var saleId = await CartService.CreateSaleAsync(order);
            CartService.GetCartItems().Clear();
            quantities.Clear();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la commande : {ex.Message}");
        }
    }

    private void Details(ArticleDetailsDto article)
    {
        Navigation.NavigateTo($"/detail/{article.Id}");
    }

    private void RemoveFromCart(ArticleDetailsDto article)
    {
        CartService.RemoveFromCart(article);
        if (quantities.ContainsKey(article.Id)) quantities.Remove(article.Id);
        StateHasChanged();
    }


    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }
}